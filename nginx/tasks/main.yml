---
# Checking if we're running on a supported system
- name: Check if OS is supported
  ansible.builtin.fail:
    msg: "{{ ansible_distribution }} is not supported by this role"
  when: ansible_distribution not in ['Debian', 'Ubuntu', 'CentOS', 'Red Hat Enterprise Linux']

# Installing Nginx
- name: Install Nginx (Debian/Ubuntu)
  ansible.builtin.apt:
    name: nginx
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"
  notify: Restart nginx

- name: Install Nginx (RHEL/CentOS)
  ansible.builtin.yum:
    name: nginx
    state: present
    update_cache: yes
  when: ansible_os_family == "RedHat"
  notify: Restart nginx

# Creating web root directory if it doesn't exist
- name: Ensure web root directory exists
  ansible.builtin.file:
    path: "{{ nginx_root_dir }}"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0755'

# Creating a sample index.html if one doesn't exist
- name: Create sample index.html if it doesn't exist
  ansible.builtin.template:
    src: index.html.j2
    dest: "{{ nginx_root_dir }}/index.html"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
    force: no  # Don't overwrite if it already exists

# Configure Nginx
- name: Configure Nginx
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart nginx

# Ensure Nginx service is enabled and started
- name: Enable and start Nginx service
  ansible.builtin.service:
    name: "{{ nginx_service_name }}"
    state: "{{ 'started' if nginx_service_started else 'stopped' }}"
    enabled: "{{ nginx_service_enabled }}"